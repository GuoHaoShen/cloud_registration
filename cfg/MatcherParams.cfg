#!/usr/bin/env python
PACKAGE = "point_cloud_matcher"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# 创建不同分组
registration_group = gen.add_group("registration")
icp_group = gen.add_group("ICP")
ndt_group = gen.add_group("NDT")
sacia_group = gen.add_group("SACIA")

# registration_group.enum([ gen.const("ICP",      str_t, "ICP", "A small constant"),
#                                 gen.const("MediNDTum",     str_t, "NDT", "A medium constant"),
#                                 gen.const("SAC-IA",      str_t, "SAC-IA", "A large constant")],
#                                 "type of registration")

registration_type = gen.enum([ gen.const("ICP",      str_t, "ICP", "迭代最近点配准方法"),
                                gen.const("NDT",     str_t, "NDT", "基于概率密度函数的点云配准方法"),
                                gen.const("SACIA",      str_t, "SACIA", "基于采样一致性(Sample Consensus, SAC)的表面匹配算法")],
                                "type of registration")

registration_group.add("registration_type", str_t, 0, "A size parameter which is edited via an enum", "ICP", edit_method=registration_type)

registration_group.add("sourceTranfrom_x", double_t, 0, "源点云x方向平移",    0, -10,   10)
registration_group.add("sourceTranfrom_y", double_t, 0, "源点云x方向平移",    0, -10,   10)
registration_group.add("sourceTranfrom_yaw", double_t, 0, "源点云yaw方向旋转",    0, 0,   6.3)


icp_group.add("icp_maxIterations", int_t, 0, "最大迭代次数",    10, 0,   100)
icp_group.add("icp_maxCorrespondenceDistance", double_t, 0, "最大匹配距离",    1, 0,   10)
icp_group.add("icp_transformationEpsilon", double_t, 0, "转换和当前估计转换之间的 epsilon(差值)阈值",    1e-6, 0,   1)
icp_group.add("icp_euclideanFitnessEpsilon", double_t, 0, "欧氏距离差 epsilon阈值",    1e-6, 0,   1)

ndt_group.add("ndt_maxIterations", int_t, 0, "最大迭代次数",    10, 0,   10000)
ndt_group.add("ndt_StepSize", double_t, 0, "设置步长",    0.1, 0,   3)
ndt_group.add("ndt_Resolution", double_t, 0, "设置分辨率",    1.0, 0,   10)
ndt_group.add("ndt_transformationEpsilon", double_t, 0, "转换和当前估计转换之间的 epsilon(差值)阈值",    0.01, 0,   1)

sacia_group.add("sacia_maxIterations", int_t, 0, "最大迭代次数",    10, 0,   5000)
sacia_group.add("sacia_maxCorrespondenceDistance", double_t, 0, "最大匹配距离",    1, 0,   10)
sacia_group.add("sacia_MinSampleDistance", double_t, 0, "最小样本距离",    0.05, 0,   5)
sacia_group.add("sacia_RANSACRefinementDistance", double_t, 0, "RANSAC 优化距离",    0.02, 0,   1)
sacia_group.add("sacia_NoemalRadiusSearch", double_t, 0, "法线计算搜索半径",    0.03, 0,   1)
sacia_group.add("sacia_FPFHRadiusSearch", double_t, 0, "FPFH计算搜索半径",    0.05, 0,   1)

exit(gen.generate(PACKAGE, "point_cloud_matcher", "MatcherParams"))